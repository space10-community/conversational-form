{% extends "../../../layout.twig" %}

{% set page_title = 'Voice - Turn your webform into a conversation' %}
{% set page_slug = '/examples/' %}


{% block page %}
    <h1><a href="#image-answers" id="image-answers" class="anchor"></a>{{page_title}}</h1>
    
    <div class="row cfdoc-example-row">
    	<div class="col-md-12 col-lg-6">
            <p><strong>CURRENTLY VOICE INPUT IS BROKEN. WE'LL TRY TO FIX IT REAL SOON.</strong></p>
            <p>Conversational Form is an open-source concept by <a href="http://space10.io" target="_blank">SPACE10</a> to easily turn any form element on a web page into a conversational form interface.</p><p>Fill out the form to take it for a spin ðŸ‘‰</p>
    		
            <p>The form:</p>
            <form id="cf-form" method="post" action="https://api.formbucket.com/f/buk_YR7xGobkQQBP0bmXAWXtxn1B">

                <fieldset>
                    <label for="name">What's your name?</label>
                    <input required cf-questions="Hey there! Itâ€™s nice to meet you â€” what should I call you?" type="text" name="name" id="name">
                </fieldset>

                <fieldset cf-questions="Thatâ€™s great, {name}! Can you believe itâ€™s this easy to use your voice?">
                    <h3>Can you believe itâ€™s this easy to use your voice?</h3>
                    <label for="believe-1">Yes</label>
                    <input type="radio" name="believe" id="believe-1" value="yes">

                    <label for="believe-2">No</label>
                    <input type="radio" name="believe" id="believe-2" value="no">

                    <label for="believe-3">Weâ€™re in the future!</label>
                    <input type="radio" name="believe" id="believe-3" value="future">
                </fieldset>

                <fieldset>
                    <label for="country">Where are you from?</label>
                    <input required cf-questions="And where are you from?" type="text" name="country" id="country">
                </fieldset>

                <fieldset>
                    <label for="season">Favourite season</label>
                    <input required cf-questions="Lovely, I always wanted to visit {country}. Whatâ€™s your favorite season of the year there?" type="text" name="season" id="season">
                </fieldset>

                <fieldset cf-questions="Wow, thatâ€™s cool, I love {season} too, but spring is my favorite!&&Whatâ€™s your favorite color?">
                    <h3>Favourite color</h3>
                    <label for="color-1">Red</label>
                    <input type="radio" name="color" id="color-1" value="red">

                    <label for="color-2">Blue</label>
                    <input type="radio" name="color" id="color-2" value="blue">

                    <label for="color-3">Yellow</label>
                    <input type="radio" name="color" id="color-3" value="yellow">

                    <label for="color-4">Purple</label>
                    <input type="radio" name="color" id="color-4" value="purple">
                </fieldset>

                <fieldset cf-questions="Oh, I like {color} too.&&I canâ€™t believe weâ€™re just talking... Do you think this is the future of web forms?">
                    <h3>Is this the future of webforms?</h3>
                    <label for="future-1">Yes</label>
                    <input type="radio" name="future" id="future-1" value="yes">

                    <label for="future-2">No</label>
                    <input type="radio" name="future" id="future-2" value="no">

                    <label for="future-3">Not sure</label>
                    <input type="radio" name="future" id="future-3" value="not-sure">
                </fieldset>

                <fieldset cf-questions="Shall we do that again? Just say yes!">
                    <h3>Shall we do that again?</h3>
                    <label for="repeat-1">Yes</label>
                    <input type="radio" name="repeat-voice" id="repeat-1" value="yes">

                    <label for="repeat-2">No</label>
                    <input type="radio" name="repeat-voice" id="repeat-2" value="no">
                </fieldset>

                <button type="submit" class="btn btn-default">Submit</button>
            </form>

    	</div>
    	<div class="col-md-12 col-lg-6 cfdoc-example">
    		<div id="cf-context" role="cf-context" cf-context></div>
    	</div>
    </div>

    <script type="text/javascript">
        var cf = "";
        function initExample(){
            var formEl = document.getElementById("cf-form");
            var microphoneInput = {};
            var dispatcher = new window.cf.EventDispatcher(), synth = null, recognition = null, msg = null, finalTranscript = "";
            var isVoiceForm_1 = window.location.pathname.toLowerCase().indexOf("index-voice") !== -1;
            
                microphoneInput = {
                    init: function () {
                        // init is called one time, when the custom input is instantiated.
                        // load voices \o/
                        synth = window.speechSynthesis;
                        msg = new window.SpeechSynthesisUtterance();
                        var setVoice = function () {
                            if (typeof synth === 'undefined') {
                                return;
                            }
                            var voices = synth.getVoices();
                            for (var i = 0; i < voices.length; i++) {
                                var element = voices[i];
                                if (element.name.toLowerCase() == "alex") {
                                    msg.voice = element;
                                    msg.lang = msg.voice.lang; // change language here
                                }
                            }
                        };
                        setVoice();
                        if (typeof synth !== 'undefined' && synth.onvoiceschanged !== undefined) {
                            synth.onvoiceschanged = setVoice;
                        }
                        // here we want to control the Voice input availability, so we don't end up with speech overlapping voice-input
                        msg.onstart = function (event) {
                            // on message end, so deactivate input
                            console.log("voice: deactivate 1");
                            cf.userInput.deactivate();
                        };
                        msg.onend = function (event) {
                            // on message end, so reactivate input
                            cf.userInput.reactivate();
                        };
                        // setup events to speak robot response
                        dispatcher.addEventListener(window.cf.ChatListEvents.CHATLIST_UPDATED, function (event) {
                            if (event.detail.currentResponse.isRobotResponse) {
                                // https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance
                                // msg.text = event.detail.currentResponse.response
                                msg.text = event.detail.currentResponse.strippedSesponse; //<-- no html tags
                                synth.speak(msg);
                            }
                        }, false);
                        // do other init stuff, like connect with external APIs ...
                    },
                    // set awaiting callback, as we will await the speak in this example
                    awaitingCallback: true,
                    cancelInput: function (event) {
                        console.log("voice: CANCEL");
                        finalTranscript = null;
                        if (recognition) {
                            recognition.onend = null;
                            recognition.onerror = null;
                            recognition.stop();
                        }
                    },
                    input: function (resolve, reject, mediaStream) {
                        console.log("voice: INPUT");
                        // input is called when user is interacting with the CF input button (UserVoiceInput)
                        // connect to Speech API (ex. Google Cloud Speech), Watson (https://github.com/watson-developer-cloud/speech-javascript-sdk) or use Web Speech API (like below), resolve with the text returned..
                        // using Promise pattern -> https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise
                        // if API fails use reject(result.toString())
                        // if API succedes use resolve(result.toString())
                        if (recognition)
                            recognition.stop();
                        recognition = new window.SpeechRecognition(),
                            finalTranscript = '';
                        recognition.continuous = false; // react only on single input
                        recognition.interimResults = false; // we don't care about interim, only final.
                        // recognition.onstart = function() {}
                        recognition.onresult = function (event) {
                            // var interimTranscript = "";
                            for (var i = event.resultIndex; i < event.results.length; ++i) {
                                if (event.results[i].isFinal) {
                                    finalTranscript += event.results[i][0].transcript;
                                }
                            }
                        };
                        recognition.onerror = function (event) {
                            reject(event.error);
                        };
                        recognition.onend = function (event) {
                            if (finalTranscript && finalTranscript !== "") {
                                resolve(finalTranscript);
                            }
                        };
                        recognition.start();
                    }
                };
                // insert yes no if user wants to enroll with Voice
                //  var fieldset = document.createElement("fieldset");
                //  fieldset.setAttribute("cf-questions", "Want to try microphone?");
                //  let checkYes: HTMLInputElement = document.createElement("input");
                //  checkYes.setAttribute("type", "checkbox");
                //  checkYes.setAttribute("cf-label", "Yes!");
                //  fieldset.appendChild(checkYes);
                //  let checkNo: HTMLInputElement = document.createElement("input");
                //  checkNo.setAttribute("type", "checkbox");
                //  checkNo.setAttribute("cf-label", "No");
                //  fieldset.appendChild(checkNo);
                //  formEl.insertBefore(fieldset, formEl.children[0]);
                // no choice, just do it
                // remove e-mail field because it is impossible to fill out the e-mail with the voice
                var emailInput = formEl.querySelector("input[type='email']");
                if (emailInput && emailInput.parentNode)
                    emailInput.parentNode.removeChild(emailInput);
            
            cf = new window.cf.ConversationalForm({
                formEl: formEl,
                eventDispatcher: dispatcher,
                // add the custom input (microphone)
                microphoneInput: microphoneInput,
                context: document.getElementById("cf-context"),
                submitCallback: function () {
                    alert("That is the end.")
                },
                flowStepCallback: function (dto, success, error) {
                    console.log('flowStepCallback', dto);
                    if (dto.tag && dto.tag.name == "repeat-voice") {
                        if (dto.tag.value[0] !== "no") {
                            location.reload();
                        }
                        else {
                            cf.addRobotChatResponse("No problem. Talk soon");
                            cf.doSubmitForm();
                        }
                    }
                    else if (dto.tag && dto.tag.domElement) {
                        if (dto.tag.domElement.getAttribute("name") == "repeat") {
                            location.reload();
                        }
                        else if (dto.tag.domElement.getAttribute("name") == "submit-form") {
                            submitForm_1(success);
                        }
                        else {
                            success();
                        }
                    }
                    else {
                        success();
                    }
                }
            });

        };
    </script>

{% endblock %}
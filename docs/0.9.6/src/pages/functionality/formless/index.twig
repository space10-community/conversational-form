{% extends "../../../layout.twig" %}

{% set page_title = 'Formless' %}
{% set page_slug = '/functionality/' %}

{% block page %}
    <h1><a href="#formless" id="formless" class="anchor"></a>{{page_title}}</h1>
   	
   	<p>The <strong>Formless</strong> feature allow you to setup a Conversational Fore without a form tag.</p>

   	<p>Example see <a href="../../examples/formless/">/examples/formless/</a> and <a href="../../assets/formless.json">JSON</a></p>

   	<p>JSON follows the rules of previous documentation, so you have</p>

   	<p><code>options</code> this is the <a href="../../options/">initialise parameters</a></p>

   	<p><code>tags</code> these are your form tags, simplest example:</p>
	<pre><code class="language-javascript">{
	"tag": "input",
	"type": "text"
}</code></pre>
	
	<p>A tag in JSON follows the supported native HTML tag standards, like min, max, pattern, value, type, so if you want to add min or max you just write it:</p>
	<pre><code class="language-javascript">{
	"tag": "input",
	"type": "text",
	"min": 3,
	"max": 10
}</code></pre>

	<p>Same goes for Conversational Attributes, here we set the label:</p>
	<pre><code class="language-javascript">{
	"tag": "input",
	"type": "text",
	"value": "prefilled value",
	"cf-label": "Please insert text"
}
</code></pre>

	<p>After you have setup your JSON (or loaded..) then you call <code>var cf = window.cf.ConversationalForm.startTheConversation(json)</code> and the Conversation is started.</p>
	<p>Formless uses DOM API under the hood to build logic, so you are able to do</p>
	<pre><code class="language-javascript">console.log(cf.formEl)</code></pre>
	<p>Which returns the form element generated from your JSON.</p>
	<p>All other functionality of Conversational Form works with Formless.</p>
	<p>Please see the above example of how to use Formless to communicate with a web-service and inject new tags at runtime.</p>

	<h2><a href="#formless-example" id="formless-example" class="anchor"></a>Example</h2>
	<p>A Conversational Form generated from JSON, see file <a href="/docs/{{nextVersion}}/assets/formless.json" target="_blank">formless.json</a>. Options and tag attributes are 1:1 with a form tag. The example here also mimics calls to a server and injecting of server created tags. This can be used to validate and create custom flows Server Side.</p>
	
	<div class="row cfdoc-example-row">
    	<div class="col-md-12 col-lg-6">
    		<pre><code class="language-javascript"> window.onload = function(){
    var xhr = new XMLHttpRequest()
    xhr.onload = function(event){
        var str = xhr.response;
        var json = JSON.parse(str);

        console.log("JSON to parse as form:", json)

        // start one w. string
        // window.cf.ConversationalForm.startTheConversation(str);

        // add callback hooks..
        json.options.submitCallback = onFormlessSubmitted.bind(window);
        json.options.flowStepCallback = onStepCallback.bind(window);
        
        // start one w. json
        conversationalForm = window.cf.ConversationalForm.startTheConversation(json);
        document.getElementById("cf-context").appendChild(conversationalForm.el);

        // in-document form
        // window.cf.ConversationalForm.startTheConversation({
        //  formEl: document.getElementById("empty-form")
        // });
    }
    xhr.open("GET", "../../assets/formless.json");
    xhr.send();
};</code></pre>
            <p>The JSON content:</p>
            <pre><code class="language-javascript">{
    "options": {
        "preventAutoAppend": true,
        "preventAutoFocus": true,
        "submitCallback": "window.onFormlessSubmited"
    },
    "tags": [
        {
            "tag": "input",
            "type": "text",
            "id": "first-tag",
            "value": "Prefilled value here",
            "cf-questions": "Prefilled1&&with follow-up1&&with follow-up11||Prefilled2&&with follow-up2&&with follow-up22"
        },
        {
            "tag": "select",
            "cf-input-placeholder": "Choose one of the above",
            "multiple": "multiple",
            "cf-questions": "Choose multiple of the elements from the list",
            "children":[
                {
                    "tag": "option",
                    "name": "option-dropdown-1",
                    "cf-label": "option-1",
                    "value": "-1"
                },
                {
                    "tag": "option",
                    "name": "option-dropdown-1",
                    "cf-label": "option-2",
                    "value": "-2"
                }
            ]
        },
        {
            "tag": "fieldset",
            "type": "Radio buttons",
            "cf-input-placeholder": "Choose one of the above",
            "cf-questions": "Choose one of the radioss",
            "children":[
                {
                    "tag": "input",
                    "type": "radio",
                    "name": "radio-buttons-1",
                    "cf-label": "radio-1",
                    "checked": "checked"
                },
                {
                    "tag": "input",
                    "type": "radio",
                    "name": "radio-buttons-1",
                    "cf-label": "radio-2"
                }
            ]
        },
        {
            "tag": "fieldset",
            "type": "Checkboxes",
            "cf-input-placeholder": "Choose above",
            "cf-questions": "Choose some checkboxes",
            "children":[
                {
                    "tag": "input",
                    "type": "checkbox",
                    "name": "checkboxes-buttons-1",
                    "cf-label": "checkbox-1",
                    "checked": "checked"
                },
                {
                    "tag": "input",
                    "type": "checkbox",
                    "name": "checkboxes-buttons-1",
                    "cf-label": "checkbox-2"
                }
            ]
        },
        {
            "tag": "input",
            "type": "password",
            "cf-input-placeholder": "Password field",
            "cf-questions": "Write a password"
        },
        {
            "tag": "input",
            "type": "text",
            "pattern": ".{5,10}",
            "cf-input-placeholder": "Input w. pattern attribute",
            "cf-error": "No less than 5 and no more than 10 characters",
            "cf-questions": "Keep between 5-10 characters"
        },
        {
            "tag": "input",
            "type": "text",
            "required": "required",
            "cf-questions": "This field is required (attribute)",
            "cf-error": "Please write something"
        },
        {
            "tag": "input",
            "type": "text",
            "required": "required",
            "cf-questions": "This field uses window.testValidation",
            "cf-validation": "window.testValidation",
            "cf-error": "Check the window.testValidation method"
        }
    ]
}</code></pre>

            <!-- Conversational Form will auto-run because of attribute "cf-form" -->
            <form id="form" cf-form>
                <!-- The form is freakin' empty -->
            </form>
            
    	</div>
    	<div class="col-md-12 col-lg-6 cfdoc-example">
    		<div id="cf-context" role="cf-context" cf-context></div>
    	</div>

        <script type="text/javascript">
            // check formless.json
            var testValidation = function(dto, success, error){
                console.log("testValidation setup from formless.json, dto:", dto);
                if(dto.text.indexOf("holmes") != -1)
                    return success();
                return error();
            };

            var conversationalForm;

            // check formless.json
            var onFormlessSubmitted = function(cf){
                var formData = conversationalForm.getFormData();
                var formDataSerialized = conversationalForm.getFormData(true);
                console.log("Formdata:", formData);
                console.log("Formdata, obj:", formDataSerialized);
                conversationalForm.addRobotChatResponse("Check the dev console for FormatData output.")

            }

            var step = 0;

            var onStepCallback = function(dto, success, error){
                // fake load, to illustrate how oe could communicate with a back-end service which could return new tags based on answer.
                var xhr = new XMLHttpRequest()
                xhr.onload = function(event){
                    if(step++ == 0){
                        // add tags that are received from pseudo webservice ..
                        var tags = [
                            {
                                // select group
                                "tag": "select",
                                "name": "country",
                                "cf-questions": "First tag value: {first-tag}&& + follow-up",
                                "cf-input-placeholder": "Some copy",
                                "multiple": false,
                                "children":[
                                    {
                                        "tag": "option",
                                        "cf-label": "USA",
                                        "value": "usa"
                                    },
                                    {
                                        "tag": "option",
                                        "cf-label": "UK",
                                        "value": "uk"
                                    }
                                ]
                            },
                            {
                                // basic tag
                                "tag": "input",
                                "type": "text",
                                "cf-questions": "Tag is injected at runtime, data from 'webservice', check source of <a href='formless.html' style='text-decoration:underline'>formless.html</a>",
                                "cf-error": "Inject some text"
                            },
                            {
                                // tag group
                                "tag": "fieldset",
                                "type": "Checkboxes",
                                "cf-input-placeholder": "Tag group is injected",
                                "cf-questions": "Choose an injected tag",
                                "children":[
                                    {
                                        "tag": "input",
                                        "type": "checkbox",
                                        "name": "checkboxes-buttons-1",
                                        "cf-label": "checkbox-x1",
                                        "checked": "checked"
                                    },
                                    {
                                        "tag": "input",
                                        "type": "checkbox",
                                        "name": "checkboxes-buttons-1",
                                        "cf-label": "checkbox-x2"
                                    }
                                ]
                            }
                        ];


                        console.log("Tags to parse and add at runtime to formless:", tags)

                        // add tag
                        // add tag at index
                        conversationalForm.addTags(tags, true);
                    }

                    setTimeout(function(){
                        // fake loading...
                        success();
                    }, 1000);
                    
                }
                xhr.onerror = function(){
                    error("Webservice failed??")
                }

                xhr.open("GET", window.location.href);
                xhr.send();
            }

            // load json file with formless data (files/formless.json)
            window.onload = function(){
                var xhr = new XMLHttpRequest()
                xhr.onload = function(event){
                    var str = xhr.response;
                    var json = JSON.parse(str);

                    console.log("JSON to parse as form:", json)

                    // start one w. string
                    // window.cf.ConversationalForm.startTheConversation(str);

                    // add callback hooks..
                    json.options.submitCallback = onFormlessSubmitted.bind(window);
                    json.options.flowStepCallback = onStepCallback.bind(window);
                    
                    // start one w. json
                    conversationalForm = window.cf.ConversationalForm.startTheConversation(json);
                    document.getElementById("cf-context").appendChild(conversationalForm.el);

                    // in-document form
                    // window.cf.ConversationalForm.startTheConversation({
                    //  formEl: document.getElementById("empty-form")
                    // });
                }
                xhr.open("GET", "../../assets/formless.json");
                xhr.send();
            };
        </script>
       
    </div>

{% endblock %}
